class PermissionManager {
  constructor() {
    this.permissions = {
      READ: 1,    // 0001
      WRITE: 2,   // 0010
      DELETE: 4   // 0100
    };
    this.nextPermissionValue = 8;
  }

  /**
   * Adds a new permission with an auto-incremented value.
   * @param {string} permissionName - Name of the new permission.
   */
  addPermission(permissionName) {
    // Check if the permission name is valid
    if (typeof permissionName !== 'string' || permissionName.trim() === '') {
        throw new Error('Invalid permission name.');
    }

    // Check if the permission already exists
    if (permissionName in this.permissions) {
        throw new Error(`Permission '${permissionName}' already exists.`);
    }

    // Add the new permission
    this.permissions[permissionName] = this.nextPermissionValue;
    this.nextPermissionValue *= 2;
}

  /**
   * Retrieves the numerical value of a permission.
   * @param {string} permissionName - Name of the permission.
   * @returns {number} - Numerical value of the permission.
   */
  getPermissionValue(permissionName) {
    if (!(permissionName in this.permissions)) {
      throw new Error(`Permission '${permissionName}' not defined.`);
    }
    return this.permissions[permissionName];
  }
  /**
     * Lists all defined permissions.
     * @returns {Object} - An object containing all permissions and their values.
     */
  listPermissions() {
    return this.permissions;
  }
  /**
     * Removes a specified permission.
     * @param {string} permissionName - The name of the permission to remove.
     */
  removePermission(permissionName) {
    if (!(permissionName in this.permissions)) {
      throw new Error(`Permission '${permissionName}' does not exist.`);
    }
    delete this.permissions[permissionName];
  }
}

module.exports = PermissionManager;
