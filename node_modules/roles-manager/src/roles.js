const PermissionManager = require('./permissions');

class RoleManager {
  constructor(permissionManager) {
    if (!(permissionManager instanceof PermissionManager)) {
      throw new Error('A valid PermissionManager instance is required.');
    }
    this.permissionManager = permissionManager;
    this.roles = {};
  }

  /**
   * Defines a role with specific permissions.
   * @param {string} roleName - The name of the role.
   * @param {Array<string>} permissions - Array of permissions for the role.
   */
  defineRole(roleName, permissions) {
    if (typeof roleName !== 'string' || roleName.trim() === '') {
      throw new Error('Invalid role name.');
    }

    this.roles[roleName] = permissions.reduce((acc, perm) => {
      return acc | this.permissionManager.getPermissionValue(perm);
    }, 0);
  }

  /**
   * Checks if a role has a specific permission.
   * @param {string} roleName - The name of the role.
   * @param {string} permissionName - The name of the permission.
   * @returns {boolean} - True if the role has the permission, false otherwise.
   */
  hasPermission(roleName, permissionName) {
    if (!this.roles[roleName]) {
      throw new Error(`Role '${roleName}' not defined.`);
    }

    const permissionValue = this.permissionManager.getPermissionValue(permissionName);
    return (this.roles[roleName] & permissionValue) === permissionValue;
  }
  /**
   * Adds a permission to an existing role.
   * @param {string} roleName - The name of the role.
   * @param {string} permissionName - The name of the permission to add.
   */
  addPermissionToRole(roleName, permissionName) {
    if (!this.roles[roleName]) {
      throw new Error(`Role '${roleName}' not defined.`);
    }

    const permissionValue = this.permissionManager.getPermissionValue(permissionName);
    this.roles[roleName] |= permissionValue;
  }
}

module.exports = RoleManager;
